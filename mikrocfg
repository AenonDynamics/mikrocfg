#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-2.0

# ____________________________________________
#
#           _ _                    __       
#  _ __ ___ (_) | ___ __ ___   ___ / _| __ _ 
# | '_ ` _ \| | |/ / '__/ _ \ / __| |_ / _` |
# | | | | | | |   <| | | (_) | (__|  _| (_| |
# |_| |_| |_|_|_|\_\_|  \___/ \___|_|  \__, |
#                                      |___/ 
# ____________________________________________

# https://github.com/AenonDynamics/mikrocfg
VERSION="2.1.1"

show_usage(){
    cat << EOF
Usage: mikrocfg [options...] <command> [args...]
manage MikroTik device configurations via ssh from a central repository

Options:
    -h,--help                       Displays this help
    -v,--version                    Displays version

Commands:
    init <hostname>                 run init script with default credentials on device (e.g. setup ssh keys; default 192.168.88.1)
    reboot <target>                 reboot targets/subtargets
    exec <target> <cmd>             execute command file/snipped on target

    build <target>                  build (merge) target config
    deploy <target>                 deploy a already build target config using custom deploy script within working dir
    apply <target>                  build, deploy and apply target configuration (system reset)

    workspace init                  initialize a new workspace/project (create structure within cwd)
    
EOF
    exit 0
}

show_version(){
    cat << EOF
mikrocfg
 - Version: ${VERSION}
 - License: GPL-2.0 https://www.gnu.org/licenses/gpl-2.0.html
 - Repository: https://github.com/AenonDynamics/mikrocfg
EOF
    exit 0
}

# simple processing for help+versioning commands
[ "$1" = "--help" ] || [ "$1" = "-h" ] || [ -z "$1" ] && show_usage
[ "$1" = "--version" ] || [ "$1" = "-v" ] && show_version

# Exit on Error
set -e

# basedir
export BASEDIR="$( cd "$( dirname "$(realpath ${BASH_SOURCE[0]})" )" && pwd )"
export WORKINGDIR="$(pwd)"

# extract target name; remove trailing slash
export TARGET_NAME="${2%/}"

# assign target dir
export TARGET_DIR=$WORKINGDIR/$TARGET_NAME

# assign dist dir to copy files
export DIST_BASEDIR=$WORKINGDIR/dist
export DIST_DIR=$DIST_BASEDIR/$TARGET_NAME

# get function utilities
source $BASEDIR/functions

# defaults
OPTIMIZE="yes"

# intro
# ---------------------------------------
function mikrocfg_intro(){
    _print_colorized '\x1B[1m' "_________________________________________________________________\n"
    figlet " >> mikrocfg"
    _print_colorized '\x1B[1m' "_________________________________________________________________\n"
}

function mikrocfg_disclaimer(){
    _print_colorized '\x1B[91m\x1B[1m' "_________________________________________________________________\n"
    _print_colorized '\x1B[91m\x1B[1m' "This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of"
    _print_colorized '\x1B[91m\x1B[1m' "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the GNU General Public License v2 for more details."
    _print_colorized '\x1B[91m\x1B[1m' "_________________________________________________________________\n"
    _print_colorized '\x1B[1m' "mikrocfg ${VERSION} - github.com/AenonDynamics/mikrocfg"
}

# check directory structure
# ---------------------------------------
function mikrocfg_prepare(){
    # Check directory
    if [ ! -d "$TARGET_DIR" ]; then
        panic "target [$TARGET_NAME] does not exists!"
    fi

    # Check directory
    if [ ! -d "$DIST_BASEDIR" ]; then
        panic "dist base directory [$DIST_BASEDIR] does not exists!"
    fi

    # project config exists ?
    if [ -f "$WORKINGDIR/.config" ]; then
        log_info "loading project configuration"
        source $WORKINGDIR/.config
    fi
}

# Trigger build
# ---------------------------------------
function mikrocfg_build(){
    # single target build ?
    if [ ! -d "${TARGET_DIR}/devices" ]; then
        print_subheading "building $TARGET_NAME"

        # passthrough
        mikrocfg_build_target "mikrotik.rsc" ""
        return
    fi

    # find all targets
    find ${TARGET_DIR}/devices/* -type d | sort | while read -r subtarget
    do
        # get basename
        local DEVICE_NAME=$(basename ${subtarget})
        print_subheading "building subtarget ${DEVICE_NAME}"

        # trigger build
        mikrocfg_build_target "${DEVICE_NAME}.rsc" "${DEVICE_NAME}"
    done
}

# Build single target
# ---------------------------------------
function mikrocfg_build_target(){

    # create temp dir
    TEMP_DIR=$(mktemp -d)
    trap "rm -rf -- ${TEMP_DIR}" EXIT

    # output filename
    DIST_FILE=$DIST_DIR/$1

    # Check directory
    if [ ! -d "$DIST_DIR" ]; then
        log_info "dist directory [$DIST_DIR] does not exists..creating"
        mkdir $DIST_DIR
    fi

    # Check build file
    if [ ! -f "$TARGET_DIR/.config" ]; then
        log_warning "target config file [$TARGET_DIR/.config] does not exists!"
    fi

    # current timestamp
    BUILD_DATE=$(date +"%Y%m%dT%H%M")

    # create empty file
    echo "" > ${DIST_FILE}

    # copy files into temp dir
    mikrocfg_copy_rsc_files "${BASEDIR}/.defaults/"
    [ -d ${WORKINGDIR}/.defaults ] && mikrocfg_copy_rsc_files "${TARGET_DIR}/.defaults/" ${TEMP_DIR}
    mikrocfg_copy_rsc_files "${TARGET_DIR}/*.rsc"

    # subtarget set ?
    [ ! -z "$2" ] && mikrocfg_copy_rsc_files "${TARGET_DIR}/devices/$2/"

    log_info "merging files.."

    # trigger hook
    hook_exec "script_header" "${DIST_FILE}"

    # append header
    cat ${TEMP_DIR}/header.rsc >> ${DIST_FILE}

    # get all *.rsc file with leading priority "00-"
    # merge all files into mikrotik.rsc
    find $TEMP_DIR -type f | grep -E '/[0-9]+-.*\.rsc$' | sort | while read -r file
    do
        # extract filename
        FILENAME=$(basename $file)

        # add header
        echo -e "\n# ----------------------------------------------" >> ${DIST_FILE}
        echo "# FILE >> $FILENAME" >> ${DIST_FILE}
        echo -e "# ----------------------------------------------\n" >> ${DIST_FILE}
        
        # append file
        cat $file >> ${DIST_FILE}

        # add linebreaks
        echo -e "\n\n" >> ${DIST_FILE}
    done

    # append footer
    cat ${TEMP_DIR}/footer.rsc >> ${DIST_FILE}

    # trigger hook
    hook_exec "script_footer" "${DIST_FILE}"

    # print files
    log_success "files merged"

    # apply optimizations ?
    if [ "$OPTIMIZE" == "yes" ]; then
        # remove comments and whitespaces
        perl -i -p0e 's/^\s*(#.*?)?\n//gms' ${DIST_FILE} && {
            log_info "comments and whitespaces removed"
        }

        # flatten multiline commands
        perl -i -p0e 's/\\\s*\n\s+//sg' ${DIST_FILE} && {
            log_info "multiline commands flattened"
        }
    fi

    # trigger hook
    hook_exec "post_build" "${DIST_FILE}"

    # show message
    log_success "BUILD READY [${DIST_FILE}]" '\x1B[92m\x1B[1m'
}

# Trigger deploy
# ---------------------------------------
function mikrocfg_deploy(){

    # single target build ?
    if [ ! -d "${TARGET_DIR}/devices" ]; then
        print_subheading "deploying target ${TARGET_NAME}"

        # passthrough
        mikrocfg_deploy_target "${DIST_DIR}/mikrotik.rsc" "$TARGET_DIR/.config" "$1"
        return
    fi

    # find all deployable targets
    find ${TARGET_DIR}/devices/* -type d | sort | while read -r subtarget
    do
        # get basename
        local DEVICE_NAME=$(basename ${subtarget})
        print_subheading "deploying subtarget ${DEVICE_NAME}"

        # trigger build
        mikrocfg_deploy_target "${DIST_DIR}/${DEVICE_NAME}.rsc" "${subtarget}/.config" "$1"
    done
}

# Run deploy script
# ---------------------------------------
function mikrocfg_deploy_target(){

    # config exists ?
    if [ ! -f $1 ]; then
        log_error "device config [$1] not exists..skipping"
        return
    fi

    # target deployconfig exists ?
    if [ ! -f $2 ]; then
        log_error "deployment config [$2] not exists..skipping"
        return
    fi

    # load target config
    source $2

    # trigger deploy hook
    hook_exec "deploy" "$1" "$3" && {
        log_success "deploying succeed"
    } || {
        log_error "deploy action failed"
    }
}

# initialize routeros device (setup accounts)
# ---------------------------------------
function mikrocfg_init(){
    # config dir exists ?
    if [ ! -d $WORKINGDIR/.init ]; then
        panic "init config [$WORKINGDIR/.init] not exists"
    fi

    # create temp dir
    TEMP_DIR=$(mktemp -d)
    trap "rm -rf -- ${TEMP_DIR}" EXIT

    # copy files
    cp ${WORKINGDIR}/.init/* ${TEMP_DIR}

    # default upload dir
    UPLOAD_DIR="flash/"

    # default hostname
    ROUTER_ADDR="192.168.88.1"

    # hostname set ?
    if [ ! -z "$1" ]; then
        ROUTER_ADDR="$1"
    fi

    # generate random password
    local INITPASSWD=$(openssl rand -base64 12)

     # show init passwd
    log_warning "using random init password ${INITPASSWD}"

    # add header
    cat ${BASEDIR}/.defaults/header.init.rsc > ${TEMP_DIR}/init.rsc

    # add random passphrase
    echo -e "\n:local initpasswd \"${INITPASSWD}\"\n" >> ${TEMP_DIR}/init.rsc

    # user defined init script exist ?
    if [ -f "${TEMP_DIR}/defconf.rsc" ]; then
        # add script
        log_info "using user defined init script from workspace"
        cat ${TEMP_DIR}/defconf.rsc >> ${TEMP_DIR}/init.rsc
    else
        # add default script
        log_info "using default init script"
        cat ${BASEDIR}/.defaults/defconf.rsc >> ${TEMP_DIR}/init.rsc
    fi

    # add footer
    cat ${BASEDIR}/.defaults/footer.init.rsc >> ${TEMP_DIR}/init.rsc

    log_info "uploading initial config to $ROUTER_ADDR"

    # /flash directory exists ? (not on CCR devices)
    {
        echo "cd flash"
    } | sftp -b - -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${ROUTER_ADDR} && {
        log_info "directory /flash exists - assuming legacy RB device"
    } || {
        log_info "directory /flash doesn't exists - assuming CCR/CRS device"
        UPLOAD_DIR=""
    }

    # upload files via scp
    scp -r -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${TEMP_DIR}/* admin@${ROUTER_ADDR}:/${UPLOAD_DIR}

    # forced delay
    sleep 2
    
    # run init script ?
    if [ -f "${TEMP_DIR}/init.rsc" ]; then
        log_info "executing initial setup.."
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${ROUTER_ADDR} \
            "/system reset-configuration keep-users=no skip-backup=yes run-after-reset=${UPLOAD_DIR}init.rsc"
    fi
}

# reboot device using target credentials
# ---------------------------------------
function mikrocfg_reboot(){
    # single target build ?
    if [ ! -d "${TARGET_DIR}/devices" ]; then
        print_subheading "rebooting device ${TARGET_NAME}"

        # load target config
        source $TARGET_DIR/.config

        # trigger
        hook_exec "reboot" || {
            log_error "reboot action failed"
        }
        return
    fi

    # find all deployable targets
    find ${TARGET_DIR}/devices/* -type d | sort | while read -r subtarget
    do
        # get basename
        local DEVICE_NAME=$(basename ${subtarget})
        print_subheading "rebooting device ${DEVICE_NAME}"

        # load target config
        source ${subtarget}/.config

        # trigger
        hook_exec "reboot" || {
            log_error "reboot action failed"
        }
    done
}

# execute command (script) directly via ssh
# ---------------------------------------
function mikrocfg_exec(){

    # command filename
    local CMD_FILE=${WORKINGDIR}/.cmd/$1.rsc

    # command exists ?
    if [ ! -f "$CMD_FILE" ]; then
        log_error "command [$1] not found"
        exit 1
    fi

    # single target build ?
    if [ ! -d "${TARGET_DIR}/devices" ]; then
        print_subheading "executing command on ${TARGET_NAME}"

        # load target config
        source $TARGET_DIR/.config

        # trigger
        hook_exec "cmd" "$CMD_FILE" || {
            log_error "command failed"
        }
        return
    fi

    # find all deployable targets
    find ${TARGET_DIR}/devices/* -type d | sort | while read -r subtarget
    do
        # get basename
        local DEVICE_NAME=$(basename ${subtarget})
        print_subheading "executing command on ${DEVICE_NAME}"

        # load target config
        source ${subtarget}/.config

        # trigger
        hook_exec "cmd" "$CMD_FILE" || {
            log_error "command failed"
        }
    done
}

# create workspace
# ---------------------------------------
function mikrocfg_workspace_init(){
    # project config already exists ?
    [ -f "$WORKINGDIR/.config" ] && panic "workspace already exists (.config file found)"

    # project dir empty ?
    [ ! -z "$(ls -A ${WORKINGDIR})" ] && panic "workspace not empty"

    # copy default workspace
    cp -RT ${BASEDIR}/.workspace ${WORKINGDIR}

    # create dirs
    mkdir ${WORKINGDIR}/{.hooks,.credentials,.cmd,.init,dist}

    # generate ssh deploy key
    ssh-keygen -t rsa -b 3072 -f ${WORKINGDIR}/.credentials/mikrotik -C "mgmt@mikrocfg"
    
    # copy ssh key to .init script dir
    cp ${WORKINGDIR}/.credentials/mikrotik.pub ${WORKINGDIR}/.init/mgmt.rsa
}

# utility
# ---------------------------------------
function mikrocfg_copy_rsc_files(){
    find $1 | grep -E '\.rsc$' | while read -r file
    do
        # extract filename
        FILENAME=$(basename $file)

        # check file/symlink exists
        if [ ! -f "${file}" ]; then
            panic "config file ${FILENAME} doesn't exist"
        fi

        # cp file
        cp ${file} ${TEMP_DIR}
        log_message "$FILENAME"
    done
}

# Command Dispatching
# ---------------------------------------
mikrocfg_disclaimer
case "$1:$2" in
    init:*)
        mikrocfg_intro
        mikrocfg_prepare
        mikrocfg_init $2
        exit 0
    ;;

    build:*)
        mikrocfg_intro
        mikrocfg_prepare
        mikrocfg_build
        exit 0
    ;;

    deploy:*)
        mikrocfg_intro
        mikrocfg_prepare
        mikrocfg_deploy "deploy"
        exit 0
    ;;

    apply:*)
        mikrocfg_intro
        mikrocfg_prepare
        mikrocfg_build
        mikrocfg_deploy "apply"
        exit 0
    ;;

    reboot:*)
        mikrocfg_intro
        mikrocfg_prepare
        mikrocfg_reboot
        exit 0
    ;;

    exec:*)
        mikrocfg_intro
        mikrocfg_prepare
        mikrocfg_exec "$3"
        exit 0
    ;;

    workspace:init)
        mikrocfg_intro
        mikrocfg_workspace_init
        exit 0
    ;;

    *)
        show_usage
        exit 1
    ;;
esac